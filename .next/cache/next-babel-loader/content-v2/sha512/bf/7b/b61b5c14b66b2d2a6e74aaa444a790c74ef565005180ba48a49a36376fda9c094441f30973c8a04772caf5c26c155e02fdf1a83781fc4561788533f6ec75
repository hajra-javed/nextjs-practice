{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hajra/Downloads/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.jsx\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nexport default function Details({\n  details\n}) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: details.title,\n    image: details.image,\n    address: details.address,\n    description: details.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://hajra:abcd1234@cluster0.lnmb9at.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  const paths = meetups.map(m => ({\n    params: {\n      meetupId: m._id.toString()\n    }\n  }));\n  return {\n    fallback: false,\n    paths\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  const client = await MongoClient.connect(\"mongodb+srv://hajra:abcd1234@cluster0.lnmb9at.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  let meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      details: {\n        title: meetup.title,\n        image: meetup.image,\n        address: meetup.address,\n        description: meetup.description\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/hajra/Downloads/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.jsx"],"names":["MeetupDetails","MongoClient","ObjectId","Details","details","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","paths","map","m","params","meetupId","toString","fallback","getStaticProps","context","console","log","meetup","findOne","props"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,wCAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AAC3C,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,OAAO,CAACC,KADjB;AAEE,IAAA,KAAK,EAAED,OAAO,CAACE,KAFjB;AAGE,IAAA,OAAO,EAAEF,OAAO,CAACG,OAHnB;AAIE,IAAA,WAAW,EAAEH,OAAO,CAACI;AAJvB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,+FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,QAAMC,KAAK,GAAGL,OAAO,CAACM,GAAR,CAAaC,CAAD,KAAQ;AAChCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAEF,CAAC,CAACL,GAAF,CAAMQ,QAAN;AADJ;AADwB,GAAR,CAAZ,CAAd;AAKA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELN,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,eAAeO,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMJ,QAAQ,GAAGI,OAAO,CAACL,MAAR,CAAeC,QAAhC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEA,QAAMd,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,+FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,MAAIiB,MAAM,GAAG,MAAMlB,iBAAiB,CAACmB,OAAlB,CAA0B;AAAEf,IAAAA,GAAG,EAAEf,QAAQ,CAACsB,QAAD;AAAf,GAA1B,CAAnB;AAEAd,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLc,IAAAA,KAAK,EAAE;AACL7B,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE0B,MAAM,CAAC1B,KADP;AAEPC,QAAAA,KAAK,EAAEyB,MAAM,CAACzB,KAFP;AAGPC,QAAAA,OAAO,EAAEwB,MAAM,CAACxB,OAHT;AAIPC,QAAAA,WAAW,EAAEuB,MAAM,CAACvB;AAJb;AADJ;AADF,GAAP;AAUD","sourcesContent":["import MeetupDetails from \"../../components/meetups/MeetupDetails\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nexport default function Details({ details }) {\n  return (\n    <MeetupDetails\n      title={details.title}\n      image={details.image}\n      address={details.address}\n      description={details.description}\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://hajra:abcd1234@cluster0.lnmb9at.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n\n  const paths = meetups.map((m) => ({\n    params: {\n      meetupId: m._id.toString(),\n    },\n  }));\n  return {\n    fallback: false,\n    paths,\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://hajra:abcd1234@cluster0.lnmb9at.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n  let meetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) });\n\n  client.close();\n\n  return {\n    props: {\n      details: {\n        title: meetup.title,\n        image: meetup.image,\n        address: meetup.address,\n        description: meetup.description,\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}